name: Pipeline Deployment Application Development Environment

on:
  push:
    branches:
      - main
      - 'task/*'
jobs:
  derive-tf-versions:
    name: Derive terraform version
    uses: ./.github/workflows/derive-tf-version.yaml
    with:
      git_ref: ${{ inputs.git_tag }}
  get-metadata:
    name: Get metadata
    runs-on: ubuntu-latest
    outputs:
      build_datetime: ${{ steps.metadata.outputs.build_datetime }}
      build_timestamp: ${{ steps.metadata.outputs.build_timestamp }}
      build_epoch: ${{ steps.metadata.outputs.build_epoch }}
    steps:
      - id: metadata
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
          echo "triggering action: ${{ github.event_name }}"
          echo "ref type: ${{ github.ref_type }}"
          echo "triggering reference: ${{ github.ref_name }}"
          echo "triggering git reference: ${{ github.ref_name }}"
          echo "deploying from git tag ${{ inputs.git_tag }}"
          echo "deployment_workspace ${{ inputs.deployment_workspace }}"
          echo "terraform_workspace_name ${{ inputs.terraform_workspace_name }}"
  scan-secrets:
    name: Scan code for secrets
    uses: ./.github/workflows/scan-secrets.yaml
  check-file-format:
    name: Check general formatting
    uses: ./.github/workflows/check-file-format.yaml
  check-markdown-format:
    name: Check format of markdown files
    uses: ./.github/workflows/check-markdown-format.yaml
  check-terraform-format:
    name: Check format of terraform code
    uses: ./.github/workflows/check-terraform-format.yaml
  validate-terraform:
    name: Validate terraform code
    uses: ./.github/workflows/validate-terraform.yaml
    needs: derive-tf-versions
    with:
      ENV: dev
      tf_vers: ${{needs.derive-tf-versions.outputs.maxVersion}}
    secrets: inherit
  check-python-black-format:
    name: Check format of python code (black)
    uses: ./.github/workflows/check-python-black-format.yaml
  check-python-flake-rules:
    name: Check python code quality (flake)
    uses: ./.github/workflows/check-python-flake-rules.yaml
  cloc-repository:
    name: Count lines of code
    uses: ./.github/workflows/cloc-repository.yaml
  unit-tests:
    needs:
      [
        get-metadata,
        scan-secrets,
        check-file-format,
        check-markdown-format,
        check-terraform-format,
        check-python-black-format,
        check-python-flake-rules,
        cloc-repository,
      ]
    name: Run unit test
    uses: ./.github/workflows/unit-test.yaml
    with:
      github_environment: dev
    secrets: inherit
  derive-deployment-workspace:
    name: Derive deployment workspace
    runs-on: ubuntu-latest
    outputs:
      deployment_workspace: ${{ steps.derive-workspace-from-tag.outputs.deployment_workspace }}
    steps:
      - id: derive-workspace-from-tag
        name: Extract deployment workspace from git tag
        run: |
          git_tag="${{ inputs.git_tag }}"
          echo "deployment_workspace=$(awk -F- '{print $1}' <<< $git_tag)-$(awk -F- '{print $2}' <<< $git_tag)" >> $GITHUB_OUTPUT
  deploy-application-infrastructure:
    name: Deploy application infrastructure
    needs:
      [
        get-metadata,
        scan-secrets,
        check-file-format,
        check-markdown-format,
        check-terraform-format,
        check-python-black-format,
        check-python-flake-rules,
        cloc-repository,
        derive-tf-versions,
        derive-deployment-workspace,
      ]
    uses: ./.github/workflows/action-infrastructure-stack.yaml
    with:
      github_environment: "dev"
      deployment_workspace: ${{ inputs.deployment_workspace }}
      stack: application
      action: apply
      tf_vers: ${{needs.derive-tf-versions.outputs.maxVersion}}
      git_ref: ${{ inputs.git_tag }}
    secrets: inherit
  build-and-deploy-react-app:
    needs: deploy-application-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm ci
        working-directory: src/frontend

      - name: Build React app
        run: npm run build
        working-directory: src/frontend

      - name: Deploy React App
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_PRODUCTION_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: "build"
