name: Pipeline Deployment Application Development Environment

on:
  push:
    branches:
      - main
      - 'task/*'

jobs:
  derive-tf-versions:
    name: Derive terraform version
    uses: ./.github/workflows/derive-tf-version.yaml
  get-metadata:
    name: Get metadata
    runs-on: ubuntu-latest
    outputs:
      build_datetime: ${{ steps.metadata.outputs.build_datetime }}
      build_timestamp: ${{ steps.metadata.outputs.build_timestamp }}
      build_epoch: ${{ steps.metadata.outputs.build_epoch }}
    steps:
      - id: metadata
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
          echo "triggering action: ${{ github.event_name }}"
          echo "ref type: ${{ github.ref_type }}"
          echo "triggering reference: ${{ github.ref_name }}"
  scan-secrets:
    name: Scan code for secrets
    uses: ./.github/workflows/scan-secrets.yaml
  check-file-format:
    name: Check general formatting
    uses: ./.github/workflows/check-file-format.yaml
  check-markdown-format:
    name: Check format of markdown files
    uses: ./.github/workflows/check-markdown-format.yaml
  check-terraform-format:
    name: Check format of terraform code
    uses: ./.github/workflows/check-terraform-format.yaml
  validate-terraform:
    name: Validate terraform code
    uses: ./.github/workflows/validate-terraform.yaml
    needs: derive-tf-versions
    with:
      ENV: dev
      tf_vers: ${{needs.derive-tf-versions.outputs.maxVersion}}
    secrets: inherit
  check-python-black-format:
    name: Check format of python code (black)
    uses: ./.github/workflows/check-python-black-format.yaml
  check-python-flake-rules:
    name: Check python code quality (flake)
    uses: ./.github/workflows/check-python-flake-rules.yaml
  cloc-repository:
    name: Count lines of code
    uses: ./.github/workflows/cloc-repository.yaml
  unit-tests:
    needs:
      [
        get-metadata,
        scan-secrets,
        check-file-format,
        check-markdown-format,
        check-terraform-format,
        check-python-black-format,
        check-python-flake-rules,
        cloc-repository,
      ]
    name: Run unit test
    uses: ./.github/workflows/unit-test.yaml
    with:
      github_environment: dev
    secrets: inherit
  deploy-application-infrastructure:
    needs:
      [
        get-metadata,
        scan-secrets,
        check-file-format,
        check-markdown-format,
        check-terraform-format,
        check-python-black-format,
        check-python-flake-rules,
        cloc-repository,
        derive-tf-versions,
      ]
    uses: ./.github/workflows/action-infrastructure-stack.yaml
    with:
      github_environment: dev
      stack: application
      action: apply
      tf_vers: ${{needs.derive-tf-versions.outputs.maxVersion}}
    secrets: inherit
  build-and-deploy-react-app:
    runs-on: ubuntu-latest
    needs:
      - deploy-application-infrastructure
    environment: dev
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install
        working-directory: src/frontend

      - name: Build React app
        run: npm run build
        working-directory: src/frontend

      - name: Extract Workspace Name
        run: |
          WORKSPACE=$(echo ${GITHUB_REF#refs/heads/} | cut -d'/' -f 2)
          echo "WORKSPACE=$WORKSPACE" >> $GITHUB_ENV
          ISSUE_KEY=$(echo $WORKSPACE | cut -d'-' -f 1)
          echo "ISSUE_KEY=$ISSUE_KEY" >> $GITHUB_ENVrun: echo "WORKSPACE=$(echo ${GITHUB_REF#refs/heads/} | sed 's/.*\/\(.*\)/\1/')" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/uec-cm-github-runner
          role-session-name: github-pipeline-session
          aws-region: eu-west-1

      - name: Find S3 Bucket
        id: find_bucket
        run: |
          for bucket in $(aws s3api list-buckets --query "Buckets[].Name" --output text)
          do
            echo "Checking bucket $bucket"
            bucket_suffix=$(echo $bucket | cut -d'-' -f 5)
            if [ "$bucket_suffix" == "${{ env.ISSUE_KEY }}" ]; then
              echo "Found matching bucket: $bucket"
              echo "S3_BUCKET_NAME=$bucket" >> $GITHUB_ENV
              break
            fi
          done

          if [ -z "${{ env.S3_BUCKET_NAME }}" ]; then
            echo "Could not find a bucket with suffix matching ${{ env.ISSUE_KEY }}"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy React App
        run:  aws s3 cp build/ s3://${{ env.S3_BUCKET_NAME }}/ --recursive
        working-directory: src/frontend
